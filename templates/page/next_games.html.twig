{% extends 'base.html.twig' %}

{% block title %}Prochains matchs{% endblock %}

{% block body %}
    {% if currentGame is defined and currentGame is not null %}
        {% include('component/current_game.html.twig') %}

        <div class="my-8 w-full border-t border-b border-gray-600"></div>
    {% endif %}

    <div class="flex justify-center">
        <h1 class="text-lg font-semibold">Prochains matchs</h1>
    </div>

    <div class="flex justify-center items-center flex-col mt-6 space-y-6">
        {% for key, game in games %}
            {% if game.type is same as constant('TYPE_BO1', game) %}
                {% include('component/simple_game.html.twig') %}
            {% else %}
                {% include('component/multi_game.html.twig') %}
            {% endif %}

            {% if not loop.last %}
                <div class="w-full border-b border-gray-900"></div>
            {% endif %}
        {% endfor %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        function predict(prediction) {
            return {
                prediction,
                async makePrediction(gameId, team) {
                    const fetchUrl = "{{ path('prediction') }}";
                    const data = {
                        game_id: gameId,
                        team,
                    };

                    let { prediction, success } = await fetch(fetchUrl, {
                        method: "POST",
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    }).then((response) => {
                        return response.json();
                    })

                    if (success) {
                        this.prediction = prediction;
                    } else {
                        document.querySelector(`p#error-${gameId}`)
                            .innerHTML = 'Les prédictions ne sont plus possibles pour ce match. Il a probablement déjà commencé.';
                    }
                },
                async makeMultiGamePrediction(gameId, range, maxRange, team1, team2) {
                    document.querySelector(`p#info-${gameId}`).innerHTML = '';

                    if ('0' === range) {
                        await this.resetPrediction(gameId);

                        return;
                    }

                    let team;
                    if (range > 0) {
                        team = team2;
                    } else {
                        team = team1;
                    }

                    const fetchUrl = "{{ path('prediction') }}";
                    const data = {
                        game_id: gameId,
                        team,
                        losing_team_score: maxRange - Math.abs(range),
                    };

                    let { prediction, success } = await fetch(fetchUrl, {
                        method: "POST",
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    }).then((response) => {
                        return response.json();
                    })

                    if (success) {
                        this.prediction = prediction;
                    } else {
                        document.querySelector(`p#error-${gameId}`)
                            .innerHTML = 'Les prédictions ne sont plus possibles pour ce match. Il a probablement déjà commencé.';
                    }
                },
                async resetPrediction(gameId) {
                    const fetchUrl = "{{ path('prediction-reset') }}";
                    const data = {
                        game_id: gameId,
                    };

                    let { prediction, success } = await fetch(fetchUrl, {
                        method: "POST",
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    }).then((response) => {
                        return response.json();
                    })

                    if (success) {
                        this.prediction = prediction;
                    } else {
                        document.querySelector(`p#error-${gameId}`)
                            .innerHTML = 'Les prédictions ne sont plus possibles pour ce match. Il a probablement déjà commencé.';
                    }

                    document.querySelector(`p#info-${gameId}`).innerHTML = 'Votre prediction a été réinitialisée.';
                },
                displayScore(team1, team2, maxRange) {
                    console.log(this.prediction.team, this.prediction.losing_team_score);
                    if (!this.prediction.team || !this.prediction.losing_team_score) {
                        return '0  - 0';
                    }

                    if (this.prediction.team === team1) {
                        return `${maxRange} - ${this.prediction.losing_team_score}`;
                    }

                    return `${this.prediction.losing_team_score} - ${maxRange}`;
                },
                initRange(team1, team2, maxRange) {
                    if (!this.prediction.team || !this.prediction.losing_team_score) {
                        this.prediction.range = 0;

                        return;
                    }

                    if (this.prediction.team === team1) {
                        this.prediction.range = -(maxRange - this.prediction.losing_team_score);
                    } else {
                        this.prediction.range = maxRange - this.prediction.losing_team_score;
                    }
                }
            }
        }
    </script>
{% endblock %}
